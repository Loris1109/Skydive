//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player flying"",
            ""id"": ""c4fba1ef-0afa-42d5-9e03-9dbd7af5f454"",
            ""actions"": [
                {
                    ""name"": ""movment"",
                    ""type"": ""Value"",
                    ""id"": ""3b9699d4-4a43-409a-a171-c9ea543a92f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8a819448-2feb-404d-b0c6-48efdf72ea2e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f44ec0e1-16af-46f6-92b1-b76338eb36e9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""816b5a26-9b73-4cf4-b7ba-3dd5bf614194"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c0152f76-f662-4d3e-9f5a-1c646def0791"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""163ec3a3-dcb3-44b1-9543-cb483d31d950"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player flying
        m_Playerflying = asset.FindActionMap("Player flying", throwIfNotFound: true);
        m_Playerflying_movment = m_Playerflying.FindAction("movment", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player flying
    private readonly InputActionMap m_Playerflying;
    private IPlayerflyingActions m_PlayerflyingActionsCallbackInterface;
    private readonly InputAction m_Playerflying_movment;
    public struct PlayerflyingActions
    {
        private @InputActions m_Wrapper;
        public PlayerflyingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @movment => m_Wrapper.m_Playerflying_movment;
        public InputActionMap Get() { return m_Wrapper.m_Playerflying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerflyingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerflyingActions instance)
        {
            if (m_Wrapper.m_PlayerflyingActionsCallbackInterface != null)
            {
                @movment.started -= m_Wrapper.m_PlayerflyingActionsCallbackInterface.OnMovment;
                @movment.performed -= m_Wrapper.m_PlayerflyingActionsCallbackInterface.OnMovment;
                @movment.canceled -= m_Wrapper.m_PlayerflyingActionsCallbackInterface.OnMovment;
            }
            m_Wrapper.m_PlayerflyingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movment.started += instance.OnMovment;
                @movment.performed += instance.OnMovment;
                @movment.canceled += instance.OnMovment;
            }
        }
    }
    public PlayerflyingActions @Playerflying => new PlayerflyingActions(this);
    public interface IPlayerflyingActions
    {
        void OnMovment(InputAction.CallbackContext context);
    }
}
